'use strict';

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) { return }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) { return }
  throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) { return }
  throw new Error("Wasm linking failure expected");
}

function assert_trap(action) {
  try { action() } catch (e) { return }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (actual !== expected) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

$$ = instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x01\x03\xa1\x80\x80\x80\x00\x20\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x07\xd8\x86\x80\x80\x00\x20\x1b\x62\x6c\x6f\x63\x6b\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x00\x12\x62\x6c\x6f\x63\x6b\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x62\x72\x00\x01\x18\x62\x6c\x6f\x63\x6b\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x02\x18\x62\x6c\x6f\x63\x6b\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x00\x03\x1e\x62\x6c\x6f\x63\x6b\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x00\x04\x16\x62\x6c\x6f\x63\x6b\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x72\x65\x74\x75\x72\x6e\x00\x05\x22\x62\x6c\x6f\x63\x6b\x2d\x6e\x65\x73\x74\x65\x64\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x06\x19\x62\x6c\x6f\x63\x6b\x2d\x6e\x65\x73\x74\x65\x64\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x62\x72\x00\x07\x1f\x62\x6c\x6f\x63\x6b\x2d\x6e\x65\x73\x74\x65\x64\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x08\x1f\x62\x6c\x6f\x63\x6b\x2d\x6e\x65\x73\x74\x65\x64\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x00\x09\x25\x62\x6c\x6f\x63\x6b\x2d\x6e\x65\x73\x74\x65\x64\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x00\x0a\x1d\x62\x6c\x6f\x63\x6b\x2d\x6e\x65\x73\x74\x65\x64\x2d\x75\x6e\x77\x69\x6e\x64\x2d\x62\x79\x2d\x72\x65\x74\x75\x72\x6e\x00\x0b\x17\x75\x6e\x61\x72\x79\x2d\x61\x66\x74\x65\x72\x2d\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x0c\x0e\x75\x6e\x61\x72\x79\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x00\x0d\x14\x75\x6e\x61\x72\x79\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x00\x0e\x12\x75\x6e\x61\x72\x79\x2d\x61\x66\x74\x65\x72\x2d\x72\x65\x74\x75\x72\x6e\x00\x0f\x18\x62\x69\x6e\x61\x72\x79\x2d\x61\x66\x74\x65\x72\x2d\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x10\x0f\x62\x69\x6e\x61\x72\x79\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x00\x11\x15\x62\x69\x6e\x61\x72\x79\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x00\x12\x13\x62\x69\x6e\x61\x72\x79\x2d\x61\x66\x74\x65\x72\x2d\x72\x65\x74\x75\x72\x6e\x00\x13\x18\x73\x65\x6c\x65\x63\x74\x2d\x61\x66\x74\x65\x72\x2d\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x14\x0f\x73\x65\x6c\x65\x63\x74\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x00\x15\x15\x73\x65\x6c\x65\x63\x74\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x00\x16\x13\x73\x65\x6c\x65\x63\x74\x2d\x61\x66\x74\x65\x72\x2d\x72\x65\x74\x75\x72\x6e\x00\x17\x1d\x62\x6c\x6f\x63\x6b\x2d\x76\x61\x6c\x75\x65\x2d\x61\x66\x74\x65\x72\x2d\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x18\x14\x62\x6c\x6f\x63\x6b\x2d\x76\x61\x6c\x75\x65\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x00\x19\x1a\x62\x6c\x6f\x63\x6b\x2d\x76\x61\x6c\x75\x65\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x00\x1a\x18\x62\x6c\x6f\x63\x6b\x2d\x76\x61\x6c\x75\x65\x2d\x61\x66\x74\x65\x72\x2d\x72\x65\x74\x75\x72\x6e\x00\x1b\x1c\x6c\x6f\x6f\x70\x2d\x76\x61\x6c\x75\x65\x2d\x61\x66\x74\x65\x72\x2d\x75\x6e\x72\x65\x61\x63\x68\x61\x62\x6c\x65\x00\x1c\x13\x6c\x6f\x6f\x70\x2d\x76\x61\x6c\x75\x65\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x00\x1d\x19\x6c\x6f\x6f\x70\x2d\x76\x61\x6c\x75\x65\x2d\x61\x66\x74\x65\x72\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x00\x1e\x17\x6c\x6f\x6f\x70\x2d\x76\x61\x6c\x75\x65\x2d\x61\x66\x74\x65\x72\x2d\x72\x65\x74\x75\x72\x6e\x00\x1f\x0a\xbb\x85\x80\x80\x00\x20\x8a\x80\x80\x80\x00\x00\x01\x00\x10\x03\x11\x01\x00\x0f\x0f\x8d\x80\x80\x80\x00\x00\x01\x00\x10\x03\x11\x01\x06\x00\x0f\x10\x09\x0f\x8d\x80\x80\x80\x00\x00\x01\x01\x10\x03\x11\x01\x10\x09\x06\x00\x0f\x0f\x90\x80\x80\x80\x00\x00\x01\x00\x10\x03\x11\x01\x10\x00\x08\x00\x00\x0f\x10\x09\x0f\x90\x80\x80\x80\x00\x00\x01\x01\x10\x03\x11\x01\x10\x09\x10\x00\x08\x00\x00\x0f\x0f\x8c\x80\x80\x80\x00\x00\x01\x01\x10\x03\x11\x01\x10\x09\x09\x0f\x0f\x8d\x80\x80\x80\x00\x00\x01\x01\x10\x03\x01\x00\x11\x01\x00\x0f\x0f\x0f\x91\x80\x80\x80\x00\x00\x01\x00\x10\x03\x01\x00\x11\x01\x06\x01\x0f\x0b\x0f\x10\x09\x0f\x90\x80\x80\x80\x00\x00\x01\x01\x10\x03\x01\x00\x11\x01\x10\x09\x06\x01\x0f\x0f\x0f\x94\x80\x80\x80\x00\x00\x01\x00\x10\x03\x01\x00\x11\x01\x10\x01\x08\x00\x01\x0f\x0b\x0f\x10\x09\x0f\x93\x80\x80\x80\x00\x00\x01\x01\x10\x03\x01\x00\x11\x01\x10\x09\x10\x01\x08\x00\x01\x0f\x0f\x0f\x8f\x80\x80\x80\x00\x00\x01\x01\x10\x03\x01\x00\x11\x01\x10\x09\x09\x0f\x0f\x0f\x89\x80\x80\x80\x00\x00\x13\x00\x00\x00\x00\x00\xba\x0f\x8f\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x10\x09\x06\x00\xba\x0f\x0f\x93\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x10\x09\x10\x00\x08\x01\x00\x00\xba\x0f\x0f\x8b\x80\x80\x80\x00\x00\x13\x00\x00\x00\x00\x10\x09\x09\xba\x0f\x92\x80\x80\x80\x00\x00\x13\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\xf0\x3f\x00\x68\x0f\x98\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\xf0\x3f\x10\x09\x06\x00\x68\x0f\x0f\x9b\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\xf0\x3f\x10\x09\x10\x00\x08\x00\x00\x68\x0f\x0f\x94\x80\x80\x80\x00\x00\x13\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\xf0\x3f\x10\x09\x09\x68\x0f\x94\x80\x80\x80\x00\x00\x13\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\xf0\x3f\x11\x00\x00\x05\x0f\x9a\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\xf0\x3f\x11\x00\x10\x09\x06\x00\x05\x0f\x0f\x9d\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\xf0\x3f\x11\x00\x10\x09\x10\x00\x08\x00\x00\x05\x0f\x0f\x96\x80\x80\x80\x00\x00\x13\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\xf0\x3f\x11\x01\x10\x09\x09\x05\x0f\x8b\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x00\x0f\x0f\x8e\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x10\x09\x06\x00\x0f\x0f\x92\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x10\x09\x10\x00\x08\x01\x00\x00\x0f\x0f\x8d\x80\x80\x80\x00\x00\x01\x01\x13\x00\x00\x00\x00\x10\x09\x09\x0f\x0f\x8b\x80\x80\x80\x00\x00\x02\x01\x13\x00\x00\x00\x00\x00\x0f\x0f\x91\x80\x80\x80\x00\x00\x01\x01\x02\x01\x13\x00\x00\x00\x00\x10\x09\x06\x01\x0f\x0f\x0f\x95\x80\x80\x80\x00\x00\x01\x01\x02\x01\x13\x00\x00\x00\x00\x10\x09\x10\x00\x08\x01\x01\x01\x0f\x0f\x0f\x8d\x80\x80\x80\x00\x00\x02\x01\x13\x00\x00\x00\x00\x10\x09\x09\x0f\x0f");
assert_trap(() => $$.exports["block-unwind-by-unreachable"]());
assert_return(() => $$.exports["block-unwind-by-br"](), 9);
assert_return(() => $$.exports["block-unwind-by-br-value"](), 9);
assert_return(() => $$.exports["block-unwind-by-br_table"](), 9);
assert_return(() => $$.exports["block-unwind-by-br_table-value"](), 9);
assert_return(() => $$.exports["block-unwind-by-return"](), 9);
assert_trap(() => $$.exports["block-nested-unwind-by-unreachable"]());
assert_return(() => $$.exports["block-nested-unwind-by-br"](), 9);
assert_return(() => $$.exports["block-nested-unwind-by-br-value"](), 9);
assert_return(() => $$.exports["block-nested-unwind-by-br_table"](), 9);
assert_return(() => $$.exports["block-nested-unwind-by-br_table-value"](), 9);
assert_return(() => $$.exports["block-nested-unwind-by-return"](), 9);
assert_trap(() => $$.exports["unary-after-unreachable"]());
assert_return(() => $$.exports["unary-after-br"](), 9);
assert_return(() => $$.exports["unary-after-br_table"](), 9);
assert_return(() => $$.exports["unary-after-return"](), 9);
assert_trap(() => $$.exports["binary-after-unreachable"]());
assert_return(() => $$.exports["binary-after-br"](), 9);
assert_return(() => $$.exports["binary-after-br_table"](), 9);
assert_return(() => $$.exports["binary-after-return"](), 9);
assert_trap(() => $$.exports["select-after-unreachable"]());
assert_return(() => $$.exports["select-after-br"](), 9);
assert_return(() => $$.exports["select-after-br_table"](), 9);
assert_return(() => $$.exports["select-after-return"](), 9);
assert_trap(() => $$.exports["block-value-after-unreachable"]());
assert_return(() => $$.exports["block-value-after-br"](), 9);
assert_return(() => $$.exports["block-value-after-br_table"](), 9);
assert_return(() => $$.exports["block-value-after-return"](), 9);
assert_trap(() => $$.exports["loop-value-after-unreachable"]());
assert_return(() => $$.exports["loop-value-after-br"](), 9);
assert_return(() => $$.exports["loop-value-after-br_table"](), 9);
assert_return(() => $$.exports["loop-value-after-return"](), 9);

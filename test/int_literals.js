'use strict';

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) { return }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) { return }
  throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) { return }
  throw new Error("Wasm linking failure expected");
}

function assert_trap(action) {
  try { action() } catch (e) { return }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (actual !== expected) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

$$ = instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x89\x80\x80\x80\x00\x02\x40\x00\x01\x01\x40\x00\x01\x02\x03\x97\x80\x80\x80\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x07\xbf\x82\x80\x80\x00\x16\x08\x69\x33\x32\x2e\x74\x65\x73\x74\x00\x00\x08\x69\x33\x32\x2e\x75\x6d\x61\x78\x00\x01\x08\x69\x33\x32\x2e\x73\x6d\x61\x78\x00\x02\x0c\x69\x33\x32\x2e\x6e\x65\x67\x5f\x73\x6d\x61\x78\x00\x03\x08\x69\x33\x32\x2e\x73\x6d\x69\x6e\x00\x04\x0c\x69\x33\x32\x2e\x61\x6c\x74\x5f\x73\x6d\x69\x6e\x00\x05\x0c\x69\x33\x32\x2e\x69\x6e\x63\x5f\x73\x6d\x69\x6e\x00\x06\x0c\x69\x33\x32\x2e\x6e\x65\x67\x5f\x7a\x65\x72\x6f\x00\x07\x0d\x69\x33\x32\x2e\x6e\x6f\x74\x5f\x6f\x63\x74\x61\x6c\x00\x08\x14\x69\x33\x32\x2e\x75\x6e\x73\x69\x67\x6e\x65\x64\x5f\x64\x65\x63\x69\x6d\x61\x6c\x00\x09\x0d\x69\x33\x32\x2e\x70\x6c\x75\x73\x5f\x73\x69\x67\x6e\x00\x0a\x08\x69\x36\x34\x2e\x74\x65\x73\x74\x00\x0b\x08\x69\x36\x34\x2e\x75\x6d\x61\x78\x00\x0c\x08\x69\x36\x34\x2e\x73\x6d\x61\x78\x00\x0d\x0c\x69\x36\x34\x2e\x6e\x65\x67\x5f\x73\x6d\x61\x78\x00\x0e\x08\x69\x36\x34\x2e\x73\x6d\x69\x6e\x00\x0f\x0c\x69\x36\x34\x2e\x61\x6c\x74\x5f\x73\x6d\x69\x6e\x00\x10\x0c\x69\x36\x34\x2e\x69\x6e\x63\x5f\x73\x6d\x69\x6e\x00\x11\x0c\x69\x36\x34\x2e\x6e\x65\x67\x5f\x7a\x65\x72\x6f\x00\x12\x0d\x69\x36\x34\x2e\x6e\x6f\x74\x5f\x6f\x63\x74\x61\x6c\x00\x13\x14\x69\x36\x34\x2e\x75\x6e\x73\x69\x67\x6e\x65\x64\x5f\x64\x65\x63\x69\x6d\x61\x6c\x00\x14\x0d\x69\x36\x34\x2e\x70\x6c\x75\x73\x5f\x73\x69\x67\x6e\x00\x15\x0a\xb0\x82\x80\x80\x00\x16\x89\x80\x80\x80\x00\x00\x10\x8d\xa0\xb7\xdd\x00\x09\x0f\x85\x80\x80\x80\x00\x00\x10\x7f\x09\x0f\x89\x80\x80\x80\x00\x00\x10\xff\xff\xff\xff\x07\x09\x0f\x89\x80\x80\x80\x00\x00\x10\x81\x80\x80\x80\x78\x09\x0f\x89\x80\x80\x80\x00\x00\x10\x80\x80\x80\x80\x78\x09\x0f\x89\x80\x80\x80\x00\x00\x10\x80\x80\x80\x80\x78\x09\x0f\x8c\x80\x80\x80\x00\x00\x10\x80\x80\x80\x80\x78\x10\x01\x40\x09\x0f\x85\x80\x80\x80\x00\x00\x10\x00\x09\x0f\x85\x80\x80\x80\x00\x00\x10\x0a\x09\x0f\x85\x80\x80\x80\x00\x00\x10\x7f\x09\x0f\x85\x80\x80\x80\x00\x00\x10\x2a\x09\x0f\x8d\x80\x80\x80\x00\x00\x11\xee\xd4\x99\xdd\xe0\xcd\xee\xd5\x0c\x09\x0f\x85\x80\x80\x80\x00\x00\x11\x7f\x09\x0f\x8e\x80\x80\x80\x00\x00\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x09\x0f\x8e\x80\x80\x80\x00\x00\x11\x81\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x09\x0f\x8e\x80\x80\x80\x00\x00\x11\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x09\x0f\x8e\x80\x80\x80\x00\x00\x11\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x09\x0f\x91\x80\x80\x80\x00\x00\x11\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x11\x01\x5b\x09\x0f\x85\x80\x80\x80\x00\x00\x11\x00\x09\x0f\x85\x80\x80\x80\x00\x00\x11\x0a\x09\x0f\x85\x80\x80\x80\x00\x00\x11\x7f\x09\x0f\x85\x80\x80\x80\x00\x00\x11\x2a\x09\x0f");
assert_return(() => $$.exports["i32.test"](), 195940365);
assert_return(() => $$.exports["i32.umax"](), -1);
assert_return(() => $$.exports["i32.smax"](), 2147483647);
assert_return(() => $$.exports["i32.neg_smax"](), -2147483647);
assert_return(() => $$.exports["i32.smin"](), -2147483648);
assert_return(() => $$.exports["i32.alt_smin"](), -2147483648);
assert_return(() => $$.exports["i32.inc_smin"](), -2147483647);
assert_return(() => $$.exports["i32.neg_zero"](), 0);
assert_return(() => $$.exports["i32.not_octal"](), 10);
assert_return(() => $$.exports["i32.unsigned_decimal"](), -1);
assert_return(() => $$.exports["i32.plus_sign"](), 42);
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x8f\x80\x80\x80\x00\x01\x02\x24\x24\x08\x69\x36\x34\x2e\x74\x65\x73\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9d\x80\x80\x80\x00\x01\x97\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\xee\xd4\x99\xdd\xe0\xcd\xee\xd5\x0c\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.test"](), int64("913028331277281902"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x8f\x80\x80\x80\x00\x01\x02\x24\x24\x08\x69\x36\x34\x2e\x75\x6d\x61\x78\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x7f\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.umax"](), int64("-1"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x8f\x80\x80\x80\x00\x01\x02\x24\x24\x08\x69\x36\x34\x2e\x73\x6d\x61\x78\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.smax"](), int64("9223372036854775807"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x93\x80\x80\x80\x00\x01\x02\x24\x24\x0c\x69\x36\x34\x2e\x6e\x65\x67\x5f\x73\x6d\x61\x78\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x81\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.neg_smax"](), int64("-9223372036854775807"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x8f\x80\x80\x80\x00\x01\x02\x24\x24\x08\x69\x36\x34\x2e\x73\x6d\x69\x6e\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.smin"](), int64("-9223372036854775808"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x93\x80\x80\x80\x00\x01\x02\x24\x24\x0c\x69\x36\x34\x2e\x61\x6c\x74\x5f\x73\x6d\x69\x6e\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.alt_smin"](), int64("-9223372036854775808"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x93\x80\x80\x80\x00\x01\x02\x24\x24\x0c\x69\x36\x34\x2e\x69\x6e\x63\x5f\x73\x6d\x69\x6e\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9e\x80\x80\x80\x00\x01\x98\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x81\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.inc_smin"](), int64("-9223372036854775807"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x93\x80\x80\x80\x00\x01\x02\x24\x24\x0c\x69\x36\x34\x2e\x6e\x65\x67\x5f\x7a\x65\x72\x6f\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x00\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.neg_zero"](), int64("0"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x94\x80\x80\x80\x00\x01\x02\x24\x24\x0d\x69\x36\x34\x2e\x6e\x6f\x74\x5f\x6f\x63\x74\x61\x6c\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x0a\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.not_octal"](), int64("10"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x9b\x80\x80\x80\x00\x01\x02\x24\x24\x14\x69\x36\x34\x2e\x75\x6e\x73\x69\x67\x6e\x65\x64\x5f\x64\x65\x63\x69\x6d\x61\x6c\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x7f\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.unsigned_decimal"](), int64("-1"))
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x94\x80\x80\x80\x00\x01\x02\x24\x24\x0d\x69\x36\x34\x2e\x70\x6c\x75\x73\x5f\x73\x69\x67\x6e\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x2a\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["i64.plus_sign"](), int64("42"))

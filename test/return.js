'use strict';

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) { return }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) { return }
  throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) { return }
  throw new Error("Wasm linking failure expected");
}

function assert_trap(action) {
  try { action() } catch (e) { return }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (actual !== expected) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

$$ = instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\xa8\x80\x80\x80\x00\x08\x40\x00\x00\x40\x00\x01\x04\x40\x00\x01\x01\x40\x00\x01\x02\x40\x02\x01\x01\x01\x01\x40\x03\x01\x01\x01\x01\x01\x40\x03\x01\x01\x01\x01\x01\x40\x00\x01\x03\x03\xb8\x80\x80\x80\x00\x37\x00\x00\x00\x00\x00\x00\x01\x02\x02\x00\x02\x00\x00\x00\x02\x02\x02\x02\x02\x00\x02\x02\x03\x02\x02\x03\x02\x04\x04\x04\x04\x02\x05\x02\x02\x02\x02\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\x07\x02\x03\x02\x02\x02\x02\x02\x04\x85\x80\x80\x80\x00\x01\x20\x01\x01\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x07\x89\x87\x80\x80\x00\x35\x08\x74\x79\x70\x65\x2d\x69\x33\x32\x00\x01\x08\x74\x79\x70\x65\x2d\x69\x36\x34\x00\x02\x08\x74\x79\x70\x65\x2d\x66\x33\x32\x00\x03\x08\x74\x79\x70\x65\x2d\x66\x36\x34\x00\x04\x07\x6e\x75\x6c\x6c\x61\x72\x79\x00\x05\x05\x75\x6e\x61\x72\x79\x00\x06\x0d\x61\x73\x2d\x66\x75\x6e\x63\x2d\x66\x69\x72\x73\x74\x00\x07\x0b\x61\x73\x2d\x66\x75\x6e\x63\x2d\x6d\x69\x64\x00\x08\x0c\x61\x73\x2d\x66\x75\x6e\x63\x2d\x6c\x61\x73\x74\x00\x09\x0d\x61\x73\x2d\x66\x75\x6e\x63\x2d\x76\x61\x6c\x75\x65\x00\x0a\x0e\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x66\x69\x72\x73\x74\x00\x0b\x0c\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x6d\x69\x64\x00\x0c\x0d\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x6c\x61\x73\x74\x00\x0d\x0e\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x76\x61\x6c\x75\x65\x00\x0e\x0d\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x66\x69\x72\x73\x74\x00\x0f\x0b\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x6d\x69\x64\x00\x10\x0c\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x6c\x61\x73\x74\x00\x11\x0b\x61\x73\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x12\x0d\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x63\x6f\x6e\x64\x00\x13\x0e\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x76\x61\x6c\x75\x65\x00\x14\x13\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x76\x61\x6c\x75\x65\x2d\x63\x6f\x6e\x64\x00\x15\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x69\x6e\x64\x65\x78\x00\x16\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x00\x17\x17\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x76\x61\x6c\x75\x65\x2d\x69\x6e\x64\x65\x78\x00\x18\x0f\x61\x73\x2d\x72\x65\x74\x75\x72\x6e\x2d\x76\x61\x6c\x75\x65\x00\x19\x0a\x61\x73\x2d\x69\x66\x2d\x63\x6f\x6e\x64\x00\x1a\x0a\x61\x73\x2d\x69\x66\x2d\x74\x68\x65\x6e\x00\x1b\x0a\x61\x73\x2d\x69\x66\x2d\x65\x6c\x73\x65\x00\x1c\x0f\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x66\x69\x72\x73\x74\x00\x1d\x10\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x73\x65\x63\x6f\x6e\x64\x00\x1e\x0e\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x63\x6f\x6e\x64\x00\x1f\x0d\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x66\x69\x72\x73\x74\x00\x21\x0b\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6d\x69\x64\x00\x22\x0c\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6c\x61\x73\x74\x00\x23\x15\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x66\x75\x6e\x63\x00\x24\x16\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x66\x69\x72\x73\x74\x00\x25\x14\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x6d\x69\x64\x00\x26\x15\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x6c\x61\x73\x74\x00\x27\x12\x61\x73\x2d\x73\x65\x74\x5f\x6c\x6f\x63\x61\x6c\x2d\x76\x61\x6c\x75\x65\x00\x28\x0f\x61\x73\x2d\x6c\x6f\x61\x64\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x29\x10\x61\x73\x2d\x6c\x6f\x61\x64\x4e\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x2a\x10\x61\x73\x2d\x73\x74\x6f\x72\x65\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x2b\x0e\x61\x73\x2d\x73\x74\x6f\x72\x65\x2d\x76\x61\x6c\x75\x65\x00\x2c\x11\x61\x73\x2d\x73\x74\x6f\x72\x65\x4e\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x2d\x0f\x61\x73\x2d\x73\x74\x6f\x72\x65\x4e\x2d\x76\x61\x6c\x75\x65\x00\x2e\x10\x61\x73\x2d\x75\x6e\x61\x72\x79\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x2f\x0e\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x6c\x65\x66\x74\x00\x30\x0f\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x72\x69\x67\x68\x74\x00\x31\x0f\x61\x73\x2d\x74\x65\x73\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x32\x0f\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x6c\x65\x66\x74\x00\x33\x10\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x72\x69\x67\x68\x74\x00\x34\x12\x61\x73\x2d\x63\x6f\x6e\x76\x65\x72\x74\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x35\x13\x61\x73\x2d\x67\x72\x6f\x77\x5f\x6d\x65\x6d\x6f\x72\x79\x2d\x73\x69\x7a\x65\x00\x36\x09\x87\x80\x80\x80\x00\x01\x00\x10\x00\x0f\x01\x20\x0a\xbb\x86\x80\x80\x00\x37\x82\x80\x80\x80\x00\x00\x0f\x85\x80\x80\x80\x00\x00\x09\x58\x0b\x0f\x85\x80\x80\x80\x00\x00\x09\x73\x0b\x0f\x85\x80\x80\x80\x00\x00\x09\x7c\x0b\x0f\x85\x80\x80\x80\x00\x00\x09\x90\x0b\x0f\x83\x80\x80\x80\x00\x00\x09\x0f\x8c\x80\x80\x80\x00\x00\x12\x00\x00\x00\x00\x00\x00\x08\x40\x09\x0f\x87\x80\x80\x80\x00\x00\x10\x01\x09\x10\x02\x0f\x89\x80\x80\x80\x00\x00\x16\x00\x10\x02\x09\x10\x03\x0f\x86\x80\x80\x80\x00\x00\x0a\x16\x00\x09\x0f\x88\x80\x80\x80\x00\x00\x0a\x16\x00\x10\x03\x09\x0f\x88\x80\x80\x80\x00\x00\x01\x00\x09\x16\x00\x0f\x0f\x8a\x80\x80\x80\x00\x00\x01\x00\x16\x00\x09\x16\x00\x0f\x0f\x89\x80\x80\x80\x00\x00\x01\x00\x0a\x16\x00\x09\x0f\x0f\x8b\x80\x80\x80\x00\x00\x01\x01\x0a\x16\x00\x10\x02\x09\x0f\x0f\x8a\x80\x80\x80\x00\x00\x02\x01\x10\x03\x09\x10\x02\x0f\x0f\x8c\x80\x80\x80\x00\x00\x02\x01\x16\x00\x10\x04\x09\x10\x02\x0f\x0f\x8b\x80\x80\x80\x00\x00\x02\x01\x0a\x16\x00\x10\x05\x09\x0f\x0f\x8a\x80\x80\x80\x00\x00\x01\x01\x10\x09\x09\x06\x00\x0f\x0f\x88\x80\x80\x80\x00\x00\x01\x00\x09\x07\x00\x0f\x0f\x8e\x80\x80\x80\x00\x00\x01\x01\x10\x08\x09\x10\x01\x07\x00\x10\x07\x0f\x0f\x8f\x80\x80\x80\x00\x00\x01\x01\x10\x06\x10\x09\x09\x07\x00\x0b\x10\x07\x0f\x0f\x8f\x80\x80\x80\x00\x00\x01\x00\x11\x09\x09\x08\x02\x00\x00\x00\x0f\x11\x7f\x0f\x91\x80\x80\x80\x00\x00\x01\x01\x10\x0a\x09\x10\x01\x08\x02\x00\x00\x00\x10\x07\x0f\x0f\x90\x80\x80\x80\x00\x00\x01\x01\x10\x06\x10\x0b\x09\x08\x01\x00\x00\x10\x07\x0f\x0f\x86\x80\x80\x80\x00\x00\x11\x07\x09\x09\x0f\x8d\x80\x80\x80\x00\x00\x10\x02\x09\x03\x00\x10\x00\x04\x10\x01\x0f\x0f\x8d\x80\x80\x80\x00\x00\x14\x00\x03\x01\x10\x03\x09\x04\x14\x01\x0f\x0f\x8d\x80\x80\x80\x00\x00\x14\x00\x03\x01\x14\x01\x04\x10\x04\x09\x0f\x0f\x8a\x80\x80\x80\x00\x00\x10\x05\x09\x14\x00\x14\x01\x05\x0f\x8a\x80\x80\x80\x00\x00\x14\x00\x10\x06\x09\x14\x01\x05\x0f\x8a\x80\x80\x80\x00\x00\x10\x00\x10\x01\x10\x07\x09\x05\x0f\x84\x80\x80\x80\x00\x00\x10\x7f\x0f\x8b\x80\x80\x80\x00\x00\x10\x0c\x09\x10\x02\x10\x03\x16\x20\x0f\x8b\x80\x80\x80\x00\x00\x10\x01\x10\x0d\x09\x10\x03\x16\x20\x0f\x8b\x80\x80\x80\x00\x00\x10\x01\x10\x02\x10\x0e\x09\x16\x20\x0f\x8d\x80\x80\x80\x00\x00\x10\x14\x09\x10\x01\x10\x02\x10\x03\x17\x06\x0f\x8d\x80\x80\x80\x00\x00\x10\x00\x10\x15\x09\x10\x02\x10\x03\x17\x06\x0f\x8d\x80\x80\x80\x00\x00\x10\x00\x10\x01\x10\x16\x09\x10\x03\x17\x06\x0f\x8d\x80\x80\x80\x00\x00\x10\x00\x10\x01\x10\x02\x10\x17\x09\x17\x06\x0f\x8b\x80\x80\x80\x00\x01\x01\x03\x10\x11\x09\x15\x00\x10\x7f\x0f\x8b\x80\x80\x80\x00\x00\x13\x9a\x99\xd9\x3f\x09\x2c\x02\x00\x0f\x88\x80\x80\x80\x00\x00\x11\x1e\x09\x24\x00\x00\x0f\x93\x80\x80\x80\x00\x00\x10\x1e\x09\x12\x00\x00\x00\x00\x00\x00\x1c\x40\x36\x03\x00\x10\x7f\x0f\x8c\x80\x80\x80\x00\x00\x10\x02\x10\x1f\x09\x34\x03\x00\x10\x7f\x0f\x8c\x80\x80\x80\x00\x00\x10\x20\x09\x10\x07\x2e\x00\x00\x10\x7f\x0f\x8c\x80\x80\x80\x00\x00\x10\x02\x10\x21\x09\x31\x01\x00\x10\x7f\x0f\x89\x80\x80\x80\x00\x00\x13\x9a\x99\x59\x40\x09\x7c\x0f\x88\x80\x80\x80\x00\x00\x10\x03\x09\x10\x0a\x40\x0f\x88\x80\x80\x80\x00\x00\x11\x0a\x11\x2d\x09\x5c\x0f\x86\x80\x80\x80\x00\x00\x10\x2c\x09\x5a\x0f\x8f\x80\x80\x80\x00\x00\x10\x2b\x09\x12\x00\x00\x00\x00\x00\x00\x24\x40\x9a\x0f\x8b\x80\x80\x80\x00\x00\x13\x00\x00\x20\x41\x10\x2a\x09\x84\x0f\x86\x80\x80\x80\x00\x00\x10\x29\x09\xa1\x0f\x86\x80\x80\x80\x00\x00\x10\x28\x09\x39\x0f");
assert_return(() => $$.exports["type-i32"]());
assert_return(() => $$.exports["type-i64"]());
assert_return(() => $$.exports["type-f32"]());
assert_return(() => $$.exports["type-f64"]());
assert_return(() => $$.exports["nullary"]());
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x04\x02\x8c\x80\x80\x80\x00\x01\x02\x24\x24\x05\x75\x6e\x61\x72\x79\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9c\x80\x80\x80\x00\x01\x96\x80\x80\x80\x00\x00\x01\x00\x16\x00\x12\x00\x00\x00\x00\x00\x00\x08\x40\x97\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["unary"](), 3.)
assert_return(() => $$.exports["as-func-first"](), 1);
assert_return(() => $$.exports["as-func-mid"](), 2);
assert_return(() => $$.exports["as-func-last"]());
assert_return(() => $$.exports["as-func-value"](), 3);
assert_return(() => $$.exports["as-block-first"]());
assert_return(() => $$.exports["as-block-mid"]());
assert_return(() => $$.exports["as-block-last"]());
assert_return(() => $$.exports["as-block-value"](), 2);
assert_return(() => $$.exports["as-loop-first"](), 3);
assert_return(() => $$.exports["as-loop-mid"](), 4);
assert_return(() => $$.exports["as-loop-last"](), 5);
assert_return(() => $$.exports["as-br-value"](), 9);
assert_return(() => $$.exports["as-br_if-cond"]());
assert_return(() => $$.exports["as-br_if-value"](), 8);
assert_return(() => $$.exports["as-br_if-value-cond"](), 9);
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x98\x80\x80\x80\x00\x01\x02\x24\x24\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x69\x6e\x64\x65\x78\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x09\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["as-br_table-index"](), int64("9"))
assert_return(() => $$.exports["as-br_table-value"](), 10);
assert_return(() => $$.exports["as-br_table-value-index"](), 11);
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x96\x80\x80\x80\x00\x01\x02\x24\x24\x0f\x61\x73\x2d\x72\x65\x74\x75\x72\x6e\x2d\x76\x61\x6c\x75\x65\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x07\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["as-return-value"](), int64("7"))
assert_return(() => $$.exports["as-if-cond"](), 2);
assert_return(() => $$.exports["as-if-then"](1, 6), 3);
assert_return(() => $$.exports["as-if-then"](0, 6), 6);
assert_return(() => $$.exports["as-if-else"](0, 6), 4);
assert_return(() => $$.exports["as-if-else"](1, 6), 6);
assert_return(() => $$.exports["as-select-first"](0, 6), 5);
assert_return(() => $$.exports["as-select-first"](1, 6), 5);
assert_return(() => $$.exports["as-select-second"](0, 6), 6);
assert_return(() => $$.exports["as-select-second"](1, 6), 6);
assert_return(() => $$.exports["as-select-cond"](), 7);
assert_return(() => $$.exports["as-call-first"](), 12);
assert_return(() => $$.exports["as-call-mid"](), 13);
assert_return(() => $$.exports["as-call-last"](), 14);
assert_return(() => $$.exports["as-call_indirect-func"](), 20);
assert_return(() => $$.exports["as-call_indirect-first"](), 21);
assert_return(() => $$.exports["as-call_indirect-mid"](), 22);
assert_return(() => $$.exports["as-call_indirect-last"](), 23);
assert_return(() => $$.exports["as-set_local-value"](), 17);
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x03\x02\x96\x80\x80\x80\x00\x01\x02\x24\x24\x0f\x61\x73\x2d\x6c\x6f\x61\x64\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x01\x00\x16\x00\x13\x9a\x99\xd9\x3f\x83\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["as-load-address"](), 1.70000004768)
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x97\x80\x80\x80\x00\x01\x02\x24\x24\x10\x61\x73\x2d\x6c\x6f\x61\x64\x4e\x2d\x61\x64\x64\x72\x65\x73\x73\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x1e\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["as-loadN-address"](), int64("30"))
assert_return(() => $$.exports["as-store-address"](), 30);
assert_return(() => $$.exports["as-store-value"](), 31);
assert_return(() => $$.exports["as-storeN-address"](), 32);
assert_return(() => $$.exports["as-storeN-value"](), 33);
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x03\x02\x97\x80\x80\x80\x00\x01\x02\x24\x24\x10\x61\x73\x2d\x75\x6e\x61\x72\x79\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x98\x80\x80\x80\x00\x01\x92\x80\x80\x80\x00\x00\x01\x00\x16\x00\x13\x9a\x99\x59\x40\x83\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["as-unary-operand"](), 3.40000009537)
assert_return(() => $$.exports["as-binary-left"](), 3);
instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x88\x80\x80\x80\x00\x02\x40\x00\x00\x40\x00\x01\x02\x02\x96\x80\x80\x80\x00\x01\x02\x24\x24\x0f\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x72\x69\x67\x68\x74\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x95\x80\x80\x80\x00\x01\x8f\x80\x80\x80\x00\x00\x01\x00\x16\x00\x11\x2d\x68\x5a\x07\x00\x09\x0f\x00\x0f", {$$: $$.exports}).exports.run();  // assert_return(() => $$.exports["as-binary-right"](), int64("45"))
assert_return(() => $$.exports["as-test-operand"](), 44);
assert_return(() => $$.exports["as-compare-left"](), 43);
assert_return(() => $$.exports["as-compare-right"](), 42);
assert_return(() => $$.exports["as-convert-operand"](), 41);
assert_return(() => $$.exports["as-grow_memory-size"](), 40);
$$ = instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x40\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x0a\x09\x0f");
$$ = instance("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x40\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\x10\x00\x09\x0f");
assert_invalid("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x40\x00\x01\x04\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x89\x80\x80\x80\x00\x01\x83\x80\x80\x80\x00\x00\x09\x0f");
assert_invalid("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x40\x00\x01\x04\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8a\x80\x80\x80\x00\x01\x84\x80\x80\x80\x00\x00\x0a\x09\x0f");
assert_invalid("\x00\x61\x73\x6d\x0c\x00\x00\x00\x01\x85\x80\x80\x80\x00\x01\x40\x00\x01\x04\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8b\x80\x80\x80\x00\x01\x85\x80\x80\x80\x00\x00\x11\x01\x09\x0f");
